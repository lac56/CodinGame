import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Solution {

    // public static int isInteger(int width, int heiht)
    // {
    //     if(width == heiht)
    //     {
    //         return 1;
    //     }
    //     return 0;
    // }

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int w = in.nextInt();
        int h = in.nextInt();
        int countX = in.nextInt();
        int countY = in.nextInt();
        int squareCnt = 0;        

        ArrayList<Integer> tops = new ArrayList<Integer>();
        ArrayList<Integer> borders = new ArrayList<Integer>();

        /* We dont need dubplications */
        ArrayList<Integer> topsFullSet = new ArrayList<Integer>();
        ArrayList<Integer> bordersFullSet = new ArrayList<Integer>();

        tops.add(w);
        topsFullSet.add(w);
        borders.add(h);
        bordersFullSet.add(h);

        for (int i = 0; i < countX; i++) {
            int x = in.nextInt();
            tops.add(x);
            topsFullSet.add(x);

            //System.err.println("x:" + x);
        }
        for (int i = 0; i < countY; i++) {
            int y = in.nextInt();
            borders.add(y);
            bordersFullSet.add(y);

            //System.err.println("y:" + y);
        }
        
        /* We should define the members maybe with arrays easily */
        /* eg: 10 ,(x1)8 , 2 ,(x2)5 , 3  at the second elemend we should compare with the second result.*/ 
       
        Collections.sort(tops, Collections.reverseOrder());
        Collections.sort(borders, Collections.reverseOrder());

        for(int i = 0; i < tops.size()-1; i++)
        {
            for(int j = i+1; j < tops.size(); j++)
            {
                topsFullSet.add(tops.get(i)-tops.get(j));
                System.err.println("topsDiff:" + (tops.get(i)-tops.get(j)));
            }
        }

        for(int i = 0; i < borders.size()-1; i++)
        {
            for(int j = i+1; j < borders.size(); j++)
            {
                bordersFullSet.add(borders.get(i)-borders.get(j));
                System.err.println("borderDiff:" + (borders.get(i)-borders.get(j)));                
            }
        }

        System.err.println("fFullSet:" + topsFullSet.toString());  
        System.err.println("bFullSet:" + bordersFullSet.toString());         

        for(int x : topsFullSet)
        {
            if(bordersFullSet.indexOf(x) > -1)
            {
                //squareCnt++;
                /*This method is so cool count the occurences */
                squareCnt  += Collections.frequency(bordersFullSet, x);
            }
        }

        // Write an answer using System.out.println()
        // To debug: System.err.println("Debug messages...");

        System.out.println(squareCnt);
    }
}
