import java.util.*;
import java.io.*;
import java.math.*;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/
class Solution {
    /**
    * x - linear
    * y - vertical
    **/ 
    public static boolean isValid(ArrayList<String> boardState, String stone, int y, int x, int boardSize){
        /* Equality is not allowed because we start counting the parts from 0. */
        if(boardSize > y && boardSize > x){
            String block = boardState.get(y).substring(x,x+1);
            if(block.equals(".")){
                return true;
            }
            else{
                return false;
            }            
        }
        else{
            return false;
        }
    }
    public static ArrayList<Integer> isSurrounded(ArrayList<String> boardState, String stone, int y, int x, int boardSize, ArrayList<Integer> lastCoordinates){
        ArrayList<Integer> coordinate = new ArrayList<Integer>();
        int surroundCount = 0;
        boolean repeated = false;
        coordinate.add(y);
        coordinate.add(x);        

        //System.err.println("Checking y:" + y + " Checking x:" + x);
        for(int j = 0; j < lastCoordinates.size()-1; j=j+2){        
            if(lastCoordinates.get(j) == y && lastCoordinates.get(j+1) == x){
                repeated = true;
            }
        }

        if(!repeated){
            // If we check the neigbour block we should check the position of it // 
            if(0 <= x && x < boardSize && 0 <= y && y < boardSize){
                // Is the left element wall? //
                if(0 > x-1){
                    //System.err.println("W1");
                    surroundCount++;
                }
                // Is the right element wall? //
                if(boardSize-1 < x+1){
                    //System.err.println("W2");
                    surroundCount++;
                }
                // Is the top element wall? //
                if(0 > y-1){
                    //System.err.println("W3");
                    surroundCount++;
                }
                // Is the bottom element wall? //
                if(boardSize-1 < y+1){
                    //System.err.println("W4");
                    surroundCount++;
                }
                // Is the left element enemy? //
                if(0 <= x-1 && 0 <= y && y < boardSize){
                    if(!boardState.get(y).substring(x-1,x).equals(".")){
                        System.err.println("E1");
                        surroundCount++;
                    }
                }
                // Is the right element enemy? //
                if(0 <= y && y < boardSize && 0 <= x && x+1 <= boardSize-1){
                    if(!boardState.get(y).substring(x+1,x+2).equals(".")){
                        System.err.println("E2");
                        surroundCount++;
                    }
                }
                // Is the top element enemy? //
                if(0 <= y-1 && y-1 < boardSize && 0 <= x && x < boardSize-1){
                    if(!boardState.get(y-1).substring(x,x+1).equals(".")){
                        System.err.println("E3");
                        surroundCount++;
                    }
                }
                // Is the bottom element enemy? //
                if(0 <= y && y+1 < boardSize && 0 <= x && x < boardSize-1){
                    if(!boardState.get(y+1).substring(x,x+1).equals(".")){
                        System.err.println("E4");
                        surroundCount++;
                    }
                }
            }

            System.err.println("Checked y:" + y + " Checked x:" + x + " Scount: " + surroundCount);
            
            // fuck
            if(surroundCount == 4){
                int left = x-1;
                int right = x+1;
                int top = y-1;
                int bottom = y+1;

                if(left > 0){
                    String block = boardState.get(y).substring(left,left+1);
                    lastCoordinates.add(y);
                    lastCoordinates.add(x);
                    System.err.println("Investigated block: " + block);
                    if(!stone.equals(block)){
                        coordinate.add(isSurrounded(boardState, stone, y, left, boardSize,lastCoordinates).get(0));
                        coordinate.add(isSurrounded(boardState, stone, y, left, boardSize,lastCoordinates).get(1));
                    }
                }
                if(right < boardSize-1){
                    String block = boardState.get(y).substring(right,right+1);
                    lastCoordinates.add(y);
                    lastCoordinates.add(x);                    
                    System.err.println("Investigated block: " + block);
                    if(!stone.equals(block)){
                        coordinate.add(isSurrounded(boardState, stone, y, right, boardSize,lastCoordinates).get(0));
                        coordinate.add(isSurrounded(boardState, stone, y, right, boardSize,lastCoordinates).get(1));
                    }
                }
                if(0 <= top && top < boardSize){
                    String block = boardState.get(top).substring(x,x+1);
                    lastCoordinates.add(y);
                    lastCoordinates.add(x);                    
                    System.err.println("Investigated block: " + block);
                    if(!stone.equals(block)){
                        coordinate.add(isSurrounded(boardState, stone, top, x, boardSize,lastCoordinates).get(0));
                        coordinate.add(isSurrounded(boardState, stone, top, x, boardSize,lastCoordinates).get(1));
                    }
                }
                if(bottom < boardSize){
                    String block = boardState.get(bottom).substring(x,x+1);
                    lastCoordinates.add(y);
                    lastCoordinates.add(x);                    
                    System.err.println("Investigated block: " + block);
                    if(!stone.equals(block)){
                        coordinate.add(isSurrounded(boardState, stone, bottom, x, boardSize,lastCoordinates).get(0));
                        coordinate.add(isSurrounded(boardState, stone, bottom, x, boardSize,lastCoordinates).get(1));
                    }
                }                                    
            }
            else{
                coordinate.set(coordinate.indexOf(y),-1);
                coordinate.set(coordinate.indexOf(x),-1);
            }
        }

        return coordinate;
    }
    public static ArrayList<String> modifyBlock(ArrayList<String> boardState, String stone, int y, int x){
        String oldRow = boardState.get(y);
        String modifiedRow =  "";
        modifiedRow = modifiedRow.concat(oldRow.substring(0,x));
        modifiedRow = modifiedRow.concat(stone);
        modifiedRow = modifiedRow.concat(oldRow.substring(x+1,oldRow.length()));

        boardState.set(y, modifiedRow);

        return boardState;

    }
    public static boolean isSurroundedGroup(ArrayList<String> boardState, String stone, int y, int x){
        String block = boardState.get(y).substring(x,x+1);
        String neighbourBlock = boardState.get(y).substring(x-1,x); // The neighbour from left.

        ArrayList<Integer> blockCoordinates = new ArrayList<Integer>();
        blockCoordinates.add(y);
        blockCoordinates.add(x);
        ArrayList<ArrayList<Integer>> groupOfBlocks = new ArrayList<ArrayList<Integer>>(); 
        groupOfBlocks.add(blockCoordinates);

        //System.err.println("Current block position:" + " y: " + y + " x: " + x + " BorW: " + stone + " block: " + block);

        if(!neighbourBlock.equals(".") && !block.equals(neighbourBlock)){
            blockCoordinates.set(0, x-1);
            blockCoordinates.set(1, y);

            groupOfBlocks.add(blockCoordinates);           
        }

        return true;
    }
    public static boolean isSoucidalMove(ArrayList<String> boardState, String stone, int y, int x, int boardSize){
        String block = boardState.get(y).substring(x,x+1);
        
        //System.err.println("Current block position:" + " y: " + y + " x: " + x + " BorW: " + stone + " block: " + block);

        return false;
    }

    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int S = in.nextInt(); // the size of the board
        int M = in.nextInt(); // the number of moves to be made
        ArrayList<String> board = new ArrayList<String>();
        ArrayList<ArrayList<Integer>> coordinatesToBeModified = new ArrayList<ArrayList<Integer>>();
        ArrayList<Integer> dummyCoordinates = new ArrayList<Integer>();
        dummyCoordinates.add(-1);
        dummyCoordinates.add(-1);
        boolean validFlag = true;

        if (in.hasNextLine()) {
            in.nextLine();
        }
        //System.err.println("/******BasicState******/");
        for (int i = 0; i < S; i++) {
            String row = in.nextLine(); // a single row in the input board
            board.add(row);
            //System.err.println(row);
        }
        System.err.println("/********Moves*********/");
        for (int i = 0; i < M; i++) {
            String move = in.nextLine(); // a strng representation of a move
            System.err.println(move);
            String elementsOfMove[] = move.split(" ");
            String stoneType = elementsOfMove[0];
            int y = Integer.parseInt(elementsOfMove[1]);
            int x = Integer.parseInt(elementsOfMove[2]);

            /* If our move valid we move that. */
            if(isValid(board,stoneType,y,x,S)){

                board = modifyBlock(board, stoneType, y, x);

                /* Draw the new board. */
                for(String row : board){
                    System.err.println(row);
                }

                int left = x-1;
                int right = x+1;
                int top = y-1;
                int bottom = y+1;

                if(stoneType.equals("B")){
                    coordinatesToBeModified.add(isSurrounded(board, "B", y, left, S,dummyCoordinates));
                    coordinatesToBeModified.add(isSurrounded(board, "B", y, right, S,dummyCoordinates));
                    coordinatesToBeModified.add(isSurrounded(board, "B", top, x, S,dummyCoordinates));
                    coordinatesToBeModified.add(isSurrounded(board, "B", bottom, x, S,dummyCoordinates));

                    if(!coordinatesToBeModified.isEmpty()){
                        for(ArrayList<Integer> coordinateToBeModified : coordinatesToBeModified){
                            for(int j = 0; j < coordinateToBeModified.size()-1; j=j+2){
                                if(coordinateToBeModified.get(j) > -1 && coordinateToBeModified.get(j+1) > -1){
                                    board = modifyBlock(board, ".", coordinateToBeModified.get(j), coordinateToBeModified.get(j+1)); 
                                }
                            }
                        }
                    }
                }
                if(stoneType.equals("W")){
                    coordinatesToBeModified.add(isSurrounded(board, "W", y, left, S,dummyCoordinates));
                    coordinatesToBeModified.add(isSurrounded(board, "W", y, right, S,dummyCoordinates));
                    coordinatesToBeModified.add(isSurrounded(board, "W", top, x, S,dummyCoordinates));
                    coordinatesToBeModified.add(isSurrounded(board, "W", bottom, x, S,dummyCoordinates));

                    if(!coordinatesToBeModified.isEmpty()){
                        for(ArrayList<Integer> coordinateToBeModified : coordinatesToBeModified){
                            for(int j = 0; j < coordinateToBeModified.size()-1; j=j+2){
                                if(coordinateToBeModified.get(j) > -1 && coordinateToBeModified.get(j+1) > -1){
                                    board = modifyBlock(board, ".", coordinateToBeModified.get(j), coordinateToBeModified.get(j+1)); 
                                }
                            }
                        }                       
                    }
                }          
            }
            else{
                validFlag = false;
                i = M;
            }
            coordinatesToBeModified.clear();       
            System.err.println("/---------------------------/");
        }

        if(validFlag){
            for(String boardRow : board){
                System.out.println(boardRow);
            }
        }
        else{
            System.out.println("NOT_VALID");
        }
    }
}
